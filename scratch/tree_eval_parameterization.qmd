---
title: "Test tree eval"
author: "David Russell"
date: "4/14/2025"
format:
  html:
    code-fold: true
---

## Air Quality

```{r}
library(sf)
library(ofo)
library(tidyverse)
```

```{r}
PREDS_FILE = "/ofo-share/ofo-itd-crossmapping_data/drone/predicted-trees/paramgroup-41/paramset-000068_plot-0016.gpkg"
REFERENCE_FILE = "/ofo-share/ofo-itd-crossmapping_data/field-reference/aligned/trees/0016.gpkg"
PLOT_BOUNDS = "/ofo-share/ofo-itd-crossmapping_data/field-reference/aligned/plot-bounds/0016.gpkg"
```

```{r}
# Compare a predicted tree map (specified by the file name) to the observed trees from the same plot
eval_preds = function(
  pred_trees,
  obs_trees,
  obs_bounds,
  edge_buffer,
  min_height_for_eval,
  min_height_pred,
  min_height_obs) {
  # Prepare to get the seconds elapsed during the evaluation
  start_time = Sys.time()

  # Prepare the predicted tree map for matching
  pred_trees = prep_pred_map(pred_trees, obs_bounds, edge_buffer = edge_buffer)
  # Prep the predicted and observed maps
  obs_trees = prep_obs_map(obs_trees, obs_bounds, edge_buffer = edge_buffer)

  pred_trees = pred_trees[pred_trees$pred_tree_height > min_height_pred, ]
  obs_trees = obs_trees[obs_trees$obs_tree_height > min_height_obs, ]

  # ! If there are no trees in the predicted tree map, return a recall and precision of 0

  if (nrow(pred_trees) > 0) {
    # Match the observed trees to the predicted trees
    obs_trees_matched = match_obs_to_pred_mee(obs_trees,
      pred_trees,
      search_distance_fun_intercept = 1,
      search_distance_fun_slope = 0.1,
      search_height_proportion = 0.5
    )
    if (TRUE){
      tree_matched_obs_filtered = obs_trees_matched[!is.na(obs_trees_matched$matched_pred_tree_id),]
      matches = match(tree_matched_obs_filtered$matched_pred_tree_id, pred_trees$pred_tree_id)
      tree_preds_ordered = pred_trees[matches, ]
      plot(tree_matched_obs_filtered$obs_tree_height, tree_preds_ordered$pred_tree_height)
    }

    # Compute the match statistics
    match_stats = compute_match_stats(
      pred_trees,
      obs_trees_matched,
      min_height = min_height_for_eval
    )
  } else {
    # If there are no trees in the predicted tree map, return a recall and precision of 0
    match_stats = data.frame(recall = 0, precision = 0, f_score = 0)
  }

  # Get the seconds elapsed during the evaluation
  end_time = Sys.time()
  elapsed_time = end_time - start_time
  elapsed_secs = as.numeric(elapsed_time, units = "secs")

  # Add the evaluation time to the match statistics
  match_stats$eval_time = elapsed_secs

  return(match_stats)
}
```
Read in the reference and predicted tree datasets
```{r}
obs_trees = st_read(REFERENCE_FILE)
pred_trees = st_read(PREDS_FILE)
obs_bounds = st_read(PLOT_BOUNDS)
```
```{r}
pred_trees = st_transform(pred_trees, st_crs(obs_trees))
coords_pred = st_coordinates(pred_trees)
pred_trees$x = coords_pred[, "X"]
pred_trees$y = coords_pred[, "Y"]
pred_trees$z = pred_trees$Z
```

```{r}
EDGE_BUFFERS = 1:10 / 2

all_match_stats = data.frame()
for (edge_buffer in EDGE_BUFFERS) {
  match_stats = eval_preds(
    pred_trees,
    obs_trees,
    obs_bounds,
    edge_buffer = edge_buffer,
    min_height_for_eval = 10,
    min_height_pred = 0,
    min_height_obs = 0
  )
  all_match_stats = bind_rows(all_match_stats, match_stats)
}
plot(EDGE_BUFFERS, all_match_stats$precision)
plot(EDGE_BUFFERS, all_match_stats$recall)
plot(EDGE_BUFFERS, all_match_stats$f_score)
```

```{r}
MIN_EVAL_HEIGHTS = 10:20 / 2

all_match_stats = data.frame()
for (min_eval_height in MIN_EVAL_HEIGHTS) {
  match_stats = eval_preds(
    pred_trees,
    obs_trees,
    obs_bounds,
    edge_buffer = 5,
    min_height_for_eval = min_eval_height,
    min_height_pred = 0,
    min_height_obs = 0
  )
  all_match_stats = bind_rows(all_match_stats, match_stats)
}
plot(MIN_EVAL_HEIGHTS, all_match_stats$precision)
plot(MIN_EVAL_HEIGHTS, all_match_stats$recall)
plot(MIN_EVAL_HEIGHTS, all_match_stats$f_score)
```

```{r}
MIN_PRED_HEIGHTS = 10:20 / 2

all_match_stats = data.frame()
for (min_pred_height in MIN_PRED_HEIGHTS) {
  match_stats = eval_preds(
    pred_trees,
    obs_trees,
    obs_bounds,
    edge_buffer = 0,
    min_height_for_eval = 0,
    min_height_pred = min_pred_height,
    min_height_obs = 0
  )
  all_match_stats = bind_rows(all_match_stats, match_stats)
}
plot(MIN_PRED_HEIGHTS, all_match_stats$precision)
plot(MIN_PRED_HEIGHTS, all_match_stats$recall)
plot(MIN_PRED_HEIGHTS, all_match_stats$f_score)
```

```{r}
MIN_OBS_HEIGHTS = 10:20 / 2

all_match_stats = data.frame()
for (min_obs_height in MIN_OBS_HEIGHTS) {
  match_stats = eval_preds(
    pred_trees,
    obs_trees,
    obs_bounds,
    edge_buffer = 5,
    min_height_for_eval = 10,
    min_height_pred = 0,
    min_height_obs = min_obs_height
  )
  all_match_stats = bind_rows(all_match_stats, match_stats)
}
plot(MIN_OBS_HEIGHTS, all_match_stats$precision)
plot(MIN_OBS_HEIGHTS, all_match_stats$recall)
plot(MIN_OBS_HEIGHTS, all_match_stats$f_score)
```
```{r}
plot(pred_trees)
```
